"""
VLC Discord Rich Presence integration module

This module provides a bridge between VLC Media Player and Discord Rich Presence.
It works by:
1. Reading media status information from a JSON file generated by a VLC Lua extension
2. Processing the media information (title, artist, playback state)
3. Updating the Discord Rich Presence to display what you're currently watching/listening to

The application runs as a background process, periodically checking for updates
to the media state and refreshing the Discord presence accordingly.

Main components:
- StatusReader: Reads the VLC status from the JSON file
- DiscordRPCClient: Handles communication with Discord
- Media states (Playing, Paused, etc.): Manages different display modes
"""

import time

from config import Config
from discord_client import DiscordRPCClient
from media_states import NoStatusState, PausedState, PlayingState, StoppedState
from status_reader import StatusReader


class VLCDiscordRP:
    def __init__(self):
        self.config = Config()
        self.discord_client = DiscordRPCClient()
        self.status_reader = StatusReader()

        self.playing_state = PlayingState(self.discord_client, self.config)
        self.paused_state = PausedState(self.discord_client, self.config)
        self.stopped_state = StoppedState(self.discord_client, self.config)
        self.no_status_state = NoStatusState(self.discord_client, self.config)

        self.current_state = self.no_status_state
        self.last_check_time = 0
        self.last_presence_update = 0
        self.force_update = True

    def should_update_presence(self, status, current_time):
        if self.force_update:
            return True

        old_status = self.current_state == self.playing_state
        new_status = status and status.get("status") == "playing"
        status_changed = old_status != new_status

        if status_changed:
            return True

        if (
            current_time - self.last_presence_update
            < self.config.PRESENCE_UPDATE_INTERVAL
        ):
            return False

        if status and status.get("status") == "playing":
            return True

        return False

    def determine_state(self, status):
        if not status:
            return self.no_status_state

        if not status.get("active", False) or status.get("status") == "stopped":
            return self.stopped_state

        if status.get("status") == "paused":
            return self.paused_state

        if status.get("status") == "playing":
            return self.playing_state

        return self.no_status_state

    def update_presence(self):
        current_time = int(time.time())
        status = self.status_reader.read_status(self.force_update)

        if not self.should_update_presence(status, current_time):
            return True

        self.last_presence_update = current_time
        self.last_check_time = current_time
        self.force_update = False

        self.current_state = self.determine_state(status)
        return self.current_state.update_presence(status)

    def run(self):
        self.config.logger.info("Starting VLC Discord Rich Presence Handler")
        self.last_check_time = int(time.time())
        self.last_presence_update = 0
        self.force_update = True

        while True:
            try:
                self.update_presence()

                time.sleep(self.config.FAST_CHECK_INTERVAL)

                current_time = int(time.time())
                if (
                    current_time - self.last_presence_update
                    >= self.config.PRESENCE_UPDATE_INTERVAL
                ):
                    self.force_update = True

            except KeyboardInterrupt:
                self.config.logger.info("Exiting due to user interrupt")
                break
            except Exception as e:
                self.config.logger.error(f"Unexpected error: {e}")
                time.sleep(5)

        if self.discord_client.connected:
            self.discord_client.clear()
            self.discord_client.close()

        self.config.logger.info("Handler stopped")


if __name__ == "__main__":
    handler = VLCDiscordRP()
    handler.run()
